<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lan's Blog</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Flash, Website</description>
    <pubDate>Sat, 06 Jun 2015 20:00:00 +0800</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>用Github做静态网站服务器</title>
      <link>http://localhost:8080/articles/use-github-page/</link>
      <pubDate>Sat, 06 Jun 2015 20:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/use-github-page/</guid>
      <author></author>
      <description>&lt;p&gt;年初换了一台虚拟主机，但是没有把博客网站重新配置好。一拖又过了大半年时间。&lt;/p&gt;
&lt;p&gt;近来想起应该分享一些想法，于是想起来要重新搭建一个博客站点。中途想试试新的静态网站生成工具。在 &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen&lt;/a&gt; 上看到一个列表，其中 &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt; 看起来是个比较流行的 JavaScript 静态网站生成工具。下午就试用了一下。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;之后发现 Hexo 一个挺不符合使用习惯的地方：POST 的 md 源文件与内使用的图片资源组织结构与之前 &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; 并不一样。最终折腾了几下又换回来了。然而不得不感叹 Hexo 模板的丰富是 Wintersmith 不能比的。所以之后自己又自行改了一下 css 样式，让原来的网站看起来不是很丑。&lt;/p&gt;
&lt;p&gt;言归正传，选择 Github 寄放博客网站的原因是方便。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot;&gt;Github Pages&lt;/a&gt; 为每个用户，用户的每个项目都保留了一个静态页面站点。这些静态站点资源是通过 git 来部署的。个人站点需要在 github 上建立一个 &lt;code&gt;用户名.github.io&lt;/code&gt; 的 repo，然后把相关文件 push 到 master 分支上。
通过 &lt;code&gt;https://用户名.github.io/&lt;/code&gt; 访问。项目的站点是在相应的项目库中建立一个 gh-pages 分支，然后将其中的源代码等文件清空，并把网站文件加进去，通过 &lt;code&gt;https://用户名.github.io/项目名&lt;/code&gt; 来访问。&lt;/p&gt;
&lt;p&gt;个人站可以绑定个人域名，通过 CNAME 映射过去。同时要在根目录下放一个 CNAME 文件，其中写上个人域名地址，以便验证和授权。&lt;/p&gt;
&lt;p&gt;所以，这跟以前用 ftp 上传文件没有什么区别。&lt;/p&gt;
&lt;p&gt;现在，这个博客网站就是一个 Github Pages 站点，并且绑定了个人域名。 &lt;a href=&quot;https://aristotle9.github.io/&quot;&gt;https://aristotle9.github.io/&lt;/a&gt; 和 &lt;a href=&quot;http://blog.mukio.org/&quot;&gt;http://blog.mukio.org/&lt;/a&gt; 都能访问。&lt;/p&gt;
</description>
    </item>
    <item>
      <title>舰娘之混淆代码分析</title>
      <link>http://localhost:8080/articles/remove-kancolle-obfus/</link>
      <pubDate>Mon, 11  Aug 2014 21:20:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/remove-kancolle-obfus/</guid>
      <author></author>
      <description>&lt;p&gt;玩舰娘后，曾用 &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; 写过一个自动远征的程序 &lt;a href=&quot;https://github.com/aristotle9/kancolle-worker&quot;&gt;kancolle-worker&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这个程序在 Clojure 的 REPL 中提供主要的舰娘 api 及基本的游戏逻辑模型，懂 Clojure 的人很容易写出一个自动远征程序。&lt;/p&gt;
&lt;p&gt;后来舰娘的主要 api 添加了一个校验参数: api_port ，用于屏蔽第三方挂机程序。该参数的生成算法是混淆过的，不易阅读。如果要继续使用外挂程序，就必须疏理一下诸如下面这种代码，然后用其他语言实现。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;...$&quot;&lt;/span&gt;)(~(~[][{}] &amp;lt;&amp;lt; ~[][{}])))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是一段表示字符串 &lt;code&gt;&amp;quot;6&amp;quot;&lt;/code&gt; 的代码。通过观察上面的表达式，发现其中所有的项都是常量，那么表达式的结果也应该是个常量。进一步分析各个表达式。
&lt;code&gt;[][{}]&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt;，&lt;code&gt;~null&lt;/code&gt; 为 &lt;code&gt;-1&lt;/code&gt;，&lt;code&gt;-1 &amp;lt;&amp;lt; -1&lt;/code&gt; 为 &lt;code&gt;-2147483648&lt;/code&gt;，&lt;code&gt;~(-2147483648)&lt;/code&gt; 为 &lt;code&gt;2147483647&lt;/code&gt;，&lt;code&gt;(new RegExp(&amp;quot;...$&amp;quot;)(2147483647)&lt;/code&gt; 为 &lt;code&gt;&amp;quot;647&amp;quot;&lt;/code&gt; （转换成字符串后取末尾3个字符），&lt;code&gt;new RegExp(&amp;quot;.&amp;quot;)(&amp;quot;647&amp;quot;)&lt;/code&gt; 为 &lt;code&gt;&amp;quot;6&amp;quot;&lt;/code&gt; (取第一个字符)。&lt;/p&gt;
&lt;p&gt;这种常量混淆形式比较新颖。&lt;/p&gt;
&lt;p&gt;自从 Air SDK 从 Flex 编译工具中独立出来后，添加了许多功能。其中就有一个基本的常量折叠功能。常量折叠就是把代码中的常量表达式替换为表达式的最终结果，这样就省去了运行时的计算，对程序的运行效率有所提升。比如 &lt;code&gt;var a:int = 1 + 1;&lt;/code&gt; 编译后与 &lt;code&gt;var a:int = 2;&lt;/code&gt; 一样。我试过用 Air SDK 重新编译上面的表达式，发现没有被折叠。原因可能是上面的常量混淆利用了 as3语言的一些隐式的类型转换，以及空数组与空对象、正则表达式的的特性，超出了编译器的常量判定能力。&lt;/p&gt;
&lt;p&gt;有个简便的方法可以计算表达式 &lt;code&gt;~(~[][{}] &amp;lt;&amp;lt; ~[][{}])&lt;/code&gt; 的结果。就是打开 Chrome 的 JS console, 运行上面的代码。正则表达式直接匹配则是 as3 语言的特性，JS 无法运行。&lt;code&gt;/./&amp;quot;234&amp;quot;&lt;/code&gt; 在 as3中 是合理的表达式，结果是 &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt;，在 JS 中是错误的式子。&lt;/p&gt;
&lt;p&gt;为了快速得到混淆前的代码，我编写了这个 &lt;a href=&quot;http://localhost:8080/articles/remove-kancolle-obfus/demo.swf&quot;&gt;Flash&lt;/a&gt; 程序，它可以将舰娘的混淆代码简化。使用效果如图：&lt;img src=&quot;/articles/remove-kancolle-obfus/image1.png&quot; alt=&quot;常量折叠功能演示&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中的常量是部分上周舰娘的代码。&lt;/p&gt;
&lt;p&gt;除此以外，舰娘的另一类代码混淆是将简单的运算符替换成函数调用。比如将 &lt;code&gt;x + y&lt;/code&gt; 替换成 &lt;code&gt;k.a(x, y)&lt;/code&gt;。这种方法与上面的混淆方法共同使用，产生的代码极难阅读。所以我写的 Flash 代码分析工具加入了表达式重新打印功能。效果如图: &lt;img src=&quot;/articles/remove-kancolle-obfus/image2.png&quot; alt=&quot;代码重新打印功能演示&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中的代码是部分上周舰娘的代码。它将常量折叠，并且将函数调用替换成 S-表达式，与 Clojure 的代码相差无几。&lt;/p&gt;
&lt;p&gt;Flash 程序是用编译器生成工具所写，主要源码在附录。&lt;/p&gt;
&lt;p&gt;它的主要目的在于分析舰娘中混淆的代码并转换为可读形式，所以并不是一个完整的语言。所涉及的运算符仅限于混淆代码使用的运行符。为了方便，正则表达式的调用写入了语法中。常量表达式与变量表达式在生成式中就分开了（ &lt;code&gt;Expr&lt;/code&gt; 与 &lt;code&gt;VExpr&lt;/code&gt; ）。最后，纠正了某 Flash 反编译工具导出的代码的一个运行符优先级问题。&lt;/p&gt;
&lt;p&gt;有了这个工具，加密后的算法会更快分析出来，自动远征程序又可以愉快地运行了。同时说一句：外挂有风险，使用需要谨慎。&lt;/p&gt;
&lt;p&gt;附1：工具使用方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从舰娘主程中分离出 Core.swf&lt;/li&gt;
&lt;li&gt;用工具反编译出 api_port 类&lt;/li&gt;
&lt;li&gt;使用我的工具分析其算法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;附2：词法、语法源码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-perl&quot;&gt;/**
js tokens
**&lt;span class=&quot;regexp&quot;&gt;/
%lex

%class JsLexer
%package org.lala.gen

%%
[ \r\n\t]            /&lt;/span&gt;* skip whitespace *&lt;span class=&quot;regexp&quot;&gt;/

0x[0-9a-fA-F]+        $$ = parseInt($$); return &quot;hex&quot;;
\d+        $$ = parseInt($$); return 'int';
new     return 'new'
RegExp  return 'RegExp'
[a-zA-Z_$@][\w_$@]* return 'id'
'[^']*'|&quot;[^&quot;]*&quot; $$ = $$.substr(1, yyleng - 2); return 'string';

/&lt;/span&gt;** flowing with div **&lt;span class=&quot;regexp&quot;&gt;/
)        return ')'
]        return ']'
}        return '}'
~        return '~'

false    $$ = false; return 'boolean'
true    $$ = true; return 'boolean'
null    $$ = null; return 'null'

/&lt;/span&gt;** flowing with regexp **&lt;span class=&quot;regexp&quot;&gt;/
&amp;amp;        return '&amp;amp;'
\(        return '('
*        return '*'
+        return '+'
,        return ','
-        return '-'
\.        return '.'
/&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;
;        
\&amp;lt;&amp;lt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'&amp;lt;&amp;lt;'&lt;/span&gt;
=        
&amp;gt;&amp;gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'&amp;gt;&amp;gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'&amp;gt;&amp;gt;&amp;gt;'&lt;/span&gt;
\[        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'['&lt;/span&gt;
{        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'{'&lt;/span&gt;
|        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'|'&lt;/span&gt;

/** div **&lt;span class=&quot;regexp&quot;&gt;/
[_$a-zA-Z][_$a-zA-Z0-9]*    return 'id'

.        return 'other';

%%

/lex&lt;/span&gt;

&lt;span class=&quot;variable&quot;&gt;%class&lt;/span&gt; JsParser
&lt;span class=&quot;variable&quot;&gt;%package&lt;/span&gt; org.lala.gen
/* &lt;span class=&quot;variable&quot;&gt;%import&lt;/span&gt; org.lala.gen.JsLexer *&lt;span class=&quot;regexp&quot;&gt;/
%lexer_name org.lala.gen.JsLexer 

%start VExpr

%left ','
%left '|'
%left '&amp;amp;'
%left '&amp;lt;&amp;lt;' '&amp;gt;&amp;gt;'
%left '&amp;gt;&amp;gt;&amp;gt;'
%left '+' '-'
%left '*' '/&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'
%left '&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;'
%left '&lt;/span&gt;new&lt;span class=&quot;string&quot;&gt;'
%left '&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;]&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;}&lt;span class=&quot;string&quot;&gt;'
%right '&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;'

%%
VExpr /* 变量表式 */
    : Expr %prec new
    | id '&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;' id '&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;' ArgList '&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;' { $$ = ['&lt;/span&gt;mcall&lt;span class=&quot;string&quot;&gt;', $1, $3, $5]; }
    | id '&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;' ArgList '&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;' { $$ = ['&lt;/span&gt;call&lt;span class=&quot;string&quot;&gt;', $1, $3]; }
    | id
    | '&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;' VExpr '&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;' { $$ = $2; }
    | VExpr '&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;' VExpr '&lt;/span&gt;]&lt;span class=&quot;string&quot;&gt;' { $$ = ['&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;', $1, $3]; }
    ;

ArgList
    : { $$ = []; }
    | VExpr { $$ = [$1]; }
    | ArgList '&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;' VExpr { $1.push($3); $$ = $1; }
    ;

Expr /* 常量表达式 */
    : Number { $$ = $1; }
    | '&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;' Expr '&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;' { $$ = $2; }
    | Expr '&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 + $3; }
    | Expr '&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 | $3; }
    | Expr '&lt;/span&gt;&amp;amp;&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 &amp;amp; $3; }
    | Expr '&lt;/span&gt;-&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 - $3; }
    | Expr '&lt;/span&gt;*&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 * $3; }
    | Expr '&lt;/span&gt;/&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 / $3; }
    | Expr '&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 &amp;lt;&amp;lt; $3; }
    | Expr '&lt;/span&gt;&amp;gt;&amp;gt;&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 &amp;gt;&amp;gt; $3; }
    | Expr '&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span class=&quot;string&quot;&gt;' Expr { $$ = $1 &amp;gt;&amp;gt;&amp;gt; $3; }
    | '&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;' Expr { $$ = ~$2; }
    | '&lt;/span&gt;-&lt;span class=&quot;string&quot;&gt;' Expr %prec '&lt;/span&gt;~&lt;span class=&quot;string&quot;&gt;' { $$ = -$2 }
    | Array
    | Expr '&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;' Expr '&lt;/span&gt;]&lt;span class=&quot;string&quot;&gt;' { $$ = $1[$3]; }
    | '&lt;/span&gt;{&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;}&lt;span class=&quot;string&quot;&gt;' { $$ = {}; }
    | new '&lt;/span&gt;RegExp&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;' string '&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;' Expr { $$ = Number(String($6).match(new RegExp($4))[0]); }
    ;

Array
    : '&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;' ArrayList '&lt;/span&gt;]&lt;span class=&quot;string&quot;&gt;' { $$ = $2; }
    ;

ArrayList
    : { $$ = [] }
    | Expr '&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;' ArrayList { $3.unshift($1); $$ = $3; }
    | Expr { $$ = [$1]; }
    ;

Number
    : hex
    | int
    ;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>新站开张</title>
      <link>http://localhost:8080/articles/new-blog/</link>
      <pubDate>Sat, 26 Jul 2014 20:20:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/new-blog/</guid>
      <author></author>
      <description>&lt;p&gt;自从百度空间改版后，便不再写过博客。过了几年，工作稳定下来了，新的博客站要开张了。&lt;/p&gt;
&lt;p&gt;这次的网站搭建在自己的 vps 上，都是纯静态的页面。用的程序如页底所写：Wintersmith，是一个极简易的 nodejs 静态网站生成框架。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;现在没有评论功能，以后我会添加的。博客内容将会是关于自己感兴趣的项目研究，开发的小程序等等。当然也会花点时间将百度空间的旧的文章迁移到这里。&lt;/p&gt;
&lt;p&gt;决定使用 Wintersmith 之前，曾花了不少时间研究 Jekyll。它的功能比 Wintersmith 要丰富许多，然而因为 Jekyll 后端使用的是 Ruby 技术栈，并不很熟悉。考虑自己近期不会转用 Ruby，并且不想花太多时间在上面，最终决定使用 node.js 系的 Wintersmith。&lt;/p&gt;
&lt;p&gt;css 样式用的是 Typo.css，感觉对中文排版效果会比较好。&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>